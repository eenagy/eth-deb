Index: eth-node-besu-24.6.0/ethereum/eth/src/test/java/org/hyperledger/besu/ethereum/eth/sync/backwardsync/BackwardSyncAlgSpec.java
===================================================================
--- eth-node-besu-24.6.0.orig/ethereum/eth/src/test/java/org/hyperledger/besu/ethereum/eth/sync/backwardsync/BackwardSyncAlgSpec.java
+++ eth-node-besu-24.6.0/ethereum/eth/src/test/java/org/hyperledger/besu/ethereum/eth/sync/backwardsync/BackwardSyncAlgSpec.java
@@ -143,60 +143,6 @@ public class BackwardSyncAlgSpec {
   }
 
   @Test
-  public void shouldAwokeWhenTTDReachedAndReady() throws Exception {
-    doReturn(false).when(context).isReady();
-
-    when(context.getSyncState().subscribeTTDReached(any())).thenReturn(88L);
-    when(context.getSyncState().subscribeCompletionReached(any())).thenReturn(99L);
-    when(context.getEthContext().getEthPeers().peerCount()).thenReturn(1);
-
-    final CompletableFuture<Void> voidCompletableFuture = algorithm.waitForReady();
-
-    Thread.sleep(50);
-    assertThat(voidCompletableFuture).isNotCompleted();
-    verify(context.getSyncState()).subscribeTTDReached(ttdCaptor.capture());
-
-    doReturn(true).when(context).isReady();
-    Thread.sleep(50);
-    assertThat(voidCompletableFuture).isNotCompleted();
-
-    ttdCaptor.getValue().onTTDReached(true);
-
-    voidCompletableFuture.get(200, TimeUnit.MILLISECONDS);
-    assertThat(voidCompletableFuture).isCompleted();
-
-    verify(context.getSyncState()).unsubscribeTTDReached(88L);
-    verify(context.getSyncState()).unsubscribeInitialConditionReached(99L);
-  }
-
-  @Test
-  public void shouldAwokeWhenConditionReachedAndReady() throws Exception {
-    doReturn(false).when(context).isReady();
-
-    when(context.getSyncState().subscribeTTDReached(any())).thenReturn(88L);
-    when(context.getSyncState().subscribeCompletionReached(any())).thenReturn(99L);
-    when(context.getEthContext().getEthPeers().peerCount()).thenReturn(1);
-
-    final CompletableFuture<Void> voidCompletableFuture = algorithm.waitForReady();
-    Thread.sleep(50);
-
-    verify(context.getSyncState()).subscribeCompletionReached(completionCaptor.capture());
-    assertThat(voidCompletableFuture).isNotCompleted();
-
-    doReturn(true).when(context).isReady();
-    Thread.sleep(50);
-    assertThat(voidCompletableFuture).isNotCompleted();
-
-    completionCaptor.getValue().onInitialSyncCompleted();
-
-    voidCompletableFuture.get(800, TimeUnit.MILLISECONDS);
-    assertThat(voidCompletableFuture).isCompleted();
-
-    verify(context.getSyncState()).unsubscribeTTDReached(88L);
-    verify(context.getSyncState()).unsubscribeInitialConditionReached(99L);
-  }
-
-  @Test
   public void shouldFinishWhenWorkIsDone() {
     doReturn(true).when(context).isReady();
     final CompletableFuture<Void> completableFuture = algorithm.pickNextStep();
Index: eth-node-besu-24.6.0/ethereum/p2p/src/test/java/org/hyperledger/besu/ethereum/p2p/discovery/dns/DNSDaemonTest.java
===================================================================
--- eth-node-besu-24.6.0.orig/ethereum/p2p/src/test/java/org/hyperledger/besu/ethereum/p2p/discovery/dns/DNSDaemonTest.java
+++ eth-node-besu-24.6.0/ethereum/p2p/src/test/java/org/hyperledger/besu/ethereum/p2p/discovery/dns/DNSDaemonTest.java
@@ -72,49 +72,6 @@ class DNSDaemonTest {
     vertx.deployVerticle(dnsDaemon, options);
   }
 
-  @Test
-  @DisplayName("Test DNS Daemon with periodic lookup to a mock DNS server")
-  void testDNSDaemonPeriodic(final Vertx vertx, final VertxTestContext testContext)
-      throws InterruptedException {
-    // checkpoint should be flagged twice
-    final Checkpoint checkpoint = testContext.checkpoint(2);
-    final AtomicInteger pass = new AtomicInteger(0);
-    dnsDaemon =
-        new DNSDaemon(
-            holeskyEnr,
-            (seq, records) -> {
-              switch (pass.incrementAndGet()) {
-                case 1:
-                  testContext.verify(
-                      () -> {
-                        assertThat(seq).isEqualTo(932);
-                        assertThat(records).hasSize(115);
-                      });
-                  break;
-                case 2:
-                  testContext.verify(
-                      () -> {
-                        assertThat(seq).isEqualTo(932);
-                        assertThat(records).isEmpty();
-                      });
-                  break;
-                default:
-                  testContext.failNow("Third pass is not expected");
-              }
-              checkpoint.flag();
-            },
-            0,
-            1, // initial delay
-            300, // second lookup after 300 ms (due to Mock DNS server, we are very quick).
-            "localhost:" + mockDnsServerVerticle.port());
-
-    final DeploymentOptions options =
-        new DeploymentOptions()
-            .setThreadingModel(ThreadingModel.VIRTUAL_THREAD)
-            .setWorkerPoolSize(1);
-    vertx.deployVerticle(dnsDaemon, options);
-  }
-
   @AfterEach
   @DisplayName("Check that the vertx worker verticle is still there")
   void lastChecks(final Vertx vertx) {
