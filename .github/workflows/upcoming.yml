name: Release

on:
  push:
    branches:
      - upcoming/**

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4


      - name: Extract directories
        id: extract_dirs
        run: |
          TAG_NAME=$(echo ${{ github.ref }} | sed 's/refs\/tags\///')
          FOLDER=$(echo $TAG_NAME | sed 's/^[^\/]*\///')
          # Extract the second and third directories from the tag name
          CODENAME=$(echo $TAG_NAME | cut -d'/' -f2)
          ARCH=$(echo $TAG_NAME | cut -d'/' -f3)
          PACKAGE_NAME=$(echo $TAG_NAME | cut -d'/' -f4)
          VERSION_NUMBER=$(echo $TAG_NAME | cut -d'/' -f5)
          VERSION_NUMBER_WITHOUT_REVISON=$(echo $TAG_NAME | cut -d'-' -f1)
          echo "::set-output name=tag_name::$TAG_NAME"
          echo "::set-output name=codename::$CODENAME"
          echo "::set-output name=package_name::$PACKAGE_NAME"
          echo "::set-output name=folder::$FOLDER"
          echo "::set-output name=version_number::$VERSION_NUMBER"
          echo "::set-output name=version_number_without_revision::$VERSION_NUMBER_WITHOUT_REVISON"
          echo "::set-output name=arch::$ARCH"  

      - name: Sbuild setup
        run: |
          sudo apt-get update
          # Note this is an older version of sbuild, no need to patch it, yet
          sudo apt install -y debhelper schroot ubuntu-dev-tools piuparts autopkgtest vmdb2 qemu-system-x86
          sudo apt-get install -y pkg-config libssl-dev uidmap
          sudo apt-get install -y libfilesys-df-perl libmime-lite-perl
          # change this into actually built version and cache it
          wget https://github.com/eth-pkg/sbuild-ubuntu/releases/download/0.85-6-1/sbuild_0.85.6_all.deb
          wget https://github.com/eth-pkg/sbuild-ubuntu/releases/download/0.85-6-1/libsbuild-perl_0.85.6_all.deb
          sudo dpkg -i sbuild_0.85.6_all.deb libsbuild-perl_0.85.6_all.deb || true

      - name: Build
        run: |
          cargo build --verbose

      - name: Install
        run: |
          cargo build --release
          mkdir -p ${HOME}/.local/bin
          mv target/release/pkg-builder ${HOME}/.local/bin
          chmod +x ${HOME}/.local/bin/pkg-builder
          echo "${HOME}/.local/bin" >> $GITHUB_PATH

      - name: Install debcrafter
        run: |
          wget -q https://github.com/eth-pkg/pkg-builder/releases/download/v0.1/debcrafter
          mkdir -p ${HOME}/.local/bin
          mv debcrafter ${HOME}/.local/bin
          chmod +x ${HOME}/.local/bin/debcrafter
          echo "${HOME}/.local/bin" >> $GITHUB_PATH

      - name: Create chroot env
        run: |
          cd ${{ steps.extract_dirs.outputs.tag_name }}
          # true if it already exists
          sudo ln -s /usr/share/debootstrap/scripts/gutsy /usr/share/debootstrap/scripts/noble || true
          pkg-builder env create
          echo "${HOME}/.cache/sbuild/${{ steps.extract_dirs.outputs.codename }}-${{ steps.extract_dirs.outputs.arch }}.tar.gz" >> $GITHUB_PATH

      - name: package
        run: |
          cd ${{ steps.extract_dirs.outputs.tag_name }}
          pkg-builder package --run-piuparts false --run-autopkgtest false --run-lintian false


      - name: piuparts
        run: |
            # installing debian-archive-keyring fails on ubuntu LTS, not sure why, but it says it is already installed
            # sudo apt-get install -y debian-archive-keyring
            cd ${{ steps.extract_dirs.outputs.tag_name }}
            ${HOME}/.local/bin/pkg-builder piuparts

      - name: autopkgtest
        run: |
            sudo cp -R ${HOME}/.pkg-builder /root
            apt list --installed autopkgtest
            cd ${{ steps.extract_dirs.outputs.tag_name }}
            sudo ${HOME}/.local/bin/pkg-builder autopkgtest

      - name: verify
        run: |
            cd ${{ steps.extract_dirs.outputs.tag_name }}
            ${HOME}/.local/bin/pkg-builder verify  --no-package true